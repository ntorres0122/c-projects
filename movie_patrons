/**
* This program allocates seating for movie theater patrons.
* Completion time: 4 hours
*
* Nikki Torres
* ntorre20@asu.edu
*/

#include <stdio.h> 
#include <string.h>
#include <stdlib.h>

struct student {  
	char last_name[30] ;  
	char first_name[30]; 
}; 
struct examination_seating {  
	struct student **seating; 
};
// default constructor
void student_init_default (struct student *p ) {
	strcpy(p->last_name, "###");
	strcpy(p->first_name, "###");
} 
// function reads student info (e.g. Mickey/Mouse) and assigns
//	the first and last names to the student.
void student_init (struct student *p, char *info) {
	strcpy(p->first_name, strtok(info, "/"));
	strcpy(p->last_name, strtok(NULL, "/"));
} 
// function prints student name as first and last initials
void student_to_string (struct student *p ) {
	printf("%c.%c. ", p->first_name[0], p->last_name[0]);
} 
// function allocates memory for the 2D array and assigns each element a default constructor
void examination_seating_init (int rowNum, int columnNum, struct examination_seating *t ) {
	t->seating = (struct student **)malloc(rowNum * sizeof(struct student*));
	for (int i = 0; i < rowNum; i++) {
		t->seating[i] = (struct student *)malloc(columnNum * sizeof(struct student));
	}
	for (int i = 0; i < rowNum; i++) {
		for (int j = 0; j < columnNum; j++) {
			student_init_default(&(t->seating[i][j]));
		}
	}
} 
// attempts to assign student p to given row and column of seating, returns true if seat is available, and 0 
//	if seat is taken.
int assign_student_at(int row, int col, struct examination_seating *t, struct student* p) {
	char s1[30];
	strcpy(s1, t->seating[row][col].last_name);
	if (!strcmp(s1, "###")) {
		strcpy(t->seating[row][col].last_name, p->last_name);
		strcpy(t->seating[row][col].first_name, p->first_name);
		return 1;
	} else {
		return 0;
	}
}
// functions checks to see if the parameters given are within the boundaries of the seating
int check_boundaries(int row, int col, struct examination_seating *t) {
	if (row < 0 || row > sizeof(t->seating)) {
		return 0;
	}
	if (col < 0 || col > sizeof(t->seating[0])) {
		return 0;
	} else {
		return 1;
	}
}
// function prints seating information
void examination_seating_to_string(struct examination_seating *t) {
	printf("\nThe current seating");
	printf("\n-------------------\n");
	for (int i = 0; i < strlen(t->seating); i++) {
		for (int j = 0; j < strlen(t->seating[0]); j++) {
			student_to_string(&t->seating[i][j]);
		}
		printf("\n");
	}
}

void main() {
	struct examination_seating examination_seating;    
	struct student temp_student;        
	
	int row, col, rowNum, columnNum;    
	char student_info[30];    
	// Ask a user to enter a number of rows for a examination seating       
	printf ("Please enter a number of rows for a examination seating.");    
	scanf ("%d", &rowNum);         
	
	// Ask a user to enter a number of columns for a examination seating      
	printf ("Please enter a number of columns for a examination seating.");      
	scanf ("%d", &columnNum);  

	// examination_seating   
	examination_seating_init(rowNum, columnNum, &examination_seating);         
	
	printf("Please enter a student information or enter \"Q\" to quit.");     
	
	/*** reading a student's information ***/    
	scanf ("%s", student_info);  
	
	/* we will read line by line **/    
	while (1 /* change this condition*/) {
		printf("\nA student information is read.");      
		// printing information.      
		printf ("%s", student_info);      
		// student       
		student_init (&temp_student, student_info);      
		// Ask a user to decide where to seat a student by asking      
		// for row and column of a seat 
		
		printf("Please enter a row number where the student wants to sit.");      
		scanf("%d", &row);
		
		printf("Please enter a column number where the student wants to sit.");      
		scanf("%d", &col);   
			// Checking if the row number and column number are valid   
			// (exist in the examination that we created.)      
		if (check_boundaries(row, col, &examination_seating) == 0) {        
			printf("\nrow or column number is not valid.");           
			printf("A student %s %s is not assigned a seat.", temp_student.first_name, temp_student.last_name);      
		} else {        
			// Assigning a seat for a student       
			if (assign_student_at(row, col, &examination_seating, &temp_student) == 1){          
				printf("\nThe seat at row %d and column %d is assigned to the student",row, col);         
				student_to_string(&temp_student);          
				examination_seating_to_string(&examination_seating);        
			} else {          
				printf("\nThe seat at row %d and column %d is taken.", row, col);        
			}      
		}      
		// Read the next studentInfo      
		printf ("Please enter a student information or enter \"Q\" to quit.");      
		/*** reading a student's information ***/     
		scanf("%s", student_info);     
	}  
}
